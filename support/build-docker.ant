<project name="LAS - Scenario Explorer - Docker">

	<!--
	     ####################################################################################################
	     #                                                                                                  #
	     # IMPORTANT: This file is automatically generated from the helper script:                          #
	     #            generate-rebuild-docker-images-script.py                                              #
	     #                                                                                                  #
	     ####################################################################################################
	-->

	<property name="docker.registry" value="660195182610.dkr.ecr.us-east-1.amazonaws.com" />

	<!-- ####################################################################################################################################################################### -->

	<!-- Clean the docker image folders -->
	<target name="clean-docker" description="Cleans docker image folders">
		<echo message="Cleaning docker image web-ui-ara..." />
		<delete verbose="true">
			<fileset dir="${docker.image.path}/web-ui-ara" includes="*.war" />
			<fileset dir="${docker.image.path}/web-ui-ara" includes="*.tar.gz" />
		</delete>

		<echo message="Cleaning docker image web-ui-ncsu..." />
		<delete verbose="true">
			<fileset dir="${docker.image.path}/web-ui-ncsu" includes="*.war" />
			<fileset dir="${docker.image.path}/web-ui-ncsu" includes="*.tar.gz" />
		</delete>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<!-- Build: ldap -->
	<target name="build-docker-image-ldap" description="Builds the LDAP docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="alpine:3.9" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="ldap" />
			<param name="image.path" value="${docker.image.path}/ldap" />
		</antcall>
	</target>

	<!-- Build: mongo-db -->
	<target name="build-docker-image-mongo-db" description="Builds the Mongo DB docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="mongo:3.6" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="mongo-db" />
			<param name="image.path" value="${docker.image.path}/mongo-db" />
		</antcall>
	</target>

	<!-- Build: teamcity-agent -->
	<target name="build-docker-image-teamcity-agent" description="Builds the Teamcity Agent docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="jetbrains/teamcity-agent" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="teamcity-agent" />
			<param name="image.path" value="${docker.image.path}/teamcity-agent" />
		</antcall>
	</target>

	<!-- Build: teamcity-database -->
	<target name="build-docker-image-teamcity-database" description="Builds the Teamcity Database docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="postgres:10-alpine" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="teamcity-database" />
			<param name="image.path" value="${docker.image.path}/teamcity-database" />
		</antcall>
	</target>

	<!-- Build: tomcat-base -->
	<target name="build-docker-image-tomcat-base" description="Builds the Tomcat Base docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="tomcat:9-jdk11-openjdk-slim" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="tomcat-base" />
			<param name="image.path" value="${docker.image.path}/tomcat-base" />
		</antcall>
	</target>

	<!-- Build: web-ui-ara -->
	<target name="build-docker-image-web-ui-ara" description="Builds the ARA Web UI docker image" depends="
		clean,
		clean-docker,
		prep-docker-build-web-ui-ara,
		create-build-tag,
		build-docker-image-tomcat-base">
		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="web-ui-ara" />
			<param name="image.path" value="${docker.image.path}/web-ui-ara" />
		</antcall>
	</target>

	<!-- Build: web-ui-ncsu -->
	<target name="build-docker-image-web-ui-ncsu" description="Builds the NCSU Web UI docker image" depends="
		clean,
		clean-docker,
		prep-docker-build-web-ui-ncsu,
		create-build-tag,
		build-docker-image-tomcat-base">
		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="web-ui-ncsu" />
			<param name="image.path" value="${docker.image.path}/web-ui-ncsu" />
		</antcall>
	</target>

	<!-- Build: reverse-proxy -->
	<target name="build-docker-image-reverse-proxy" description="Builds the Reverse Proxy docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="debian:buster-slim" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="reverse-proxy" />
			<param name="image.path" value="${docker.image.path}/reverse-proxy" />
		</antcall>
	</target>

	<!-- Build: dev-console -->
	<target name="build-docker-image-dev-console" description="Builds the Dev Console docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="centos:8" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="dev-console" />
			<param name="image.path" value="${docker.image.path}/dev-console" />
		</antcall>
	</target>

	<!-- Build: swagger-ui -->
	<target name="build-docker-image-swagger-ui" description="Builds the Swagger UI docker image" depends="
		clean,
		clean-docker,
		create-build-tag">
		<antcall target="pull-base-image">
			<param name="image.name" value="swaggerapi/swagger-ui:v3.24.0" />
		</antcall>

		<antcall target="run-build-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="swagger-ui" />
			<param name="image.path" value="${docker.image.path}/swagger-ui" />
		</antcall>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="build-docker-images" description="Builds all docker images" depends="
		build-docker-image-ldap,
		build-docker-image-mongo-db,
		build-docker-image-teamcity-agent,
		build-docker-image-teamcity-database,
		build-docker-image-tomcat-base,
		build-docker-image-web-ui-ara,
		build-docker-image-web-ui-ncsu,
		build-docker-image-reverse-proxy,
		build-docker-image-dev-console,
		build-docker-image-swagger-ui
		" />

	<!-- ####################################################################################################################################################################### -->

	<!-- Push: ldap -->
	<target name="push-docker-image-ldap-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="ldap" />
			<param name="image.path" value="${docker.image.path}/ldap" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: ldap -->
	<target name="push-docker-image-ldap-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="ldap" />
			<param name="image.path" value="${docker.image.path}/ldap" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: mongo-db -->
	<target name="push-docker-image-mongo-db-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="mongo-db" />
			<param name="image.path" value="${docker.image.path}/mongo-db" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: mongo-db -->
	<target name="push-docker-image-mongo-db-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="mongo-db" />
			<param name="image.path" value="${docker.image.path}/mongo-db" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: teamcity-agent -->
	<target name="push-docker-image-teamcity-agent-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="teamcity-agent" />
			<param name="image.path" value="${docker.image.path}/teamcity-agent" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: teamcity-agent -->
	<target name="push-docker-image-teamcity-agent-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="teamcity-agent" />
			<param name="image.path" value="${docker.image.path}/teamcity-agent" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: teamcity-database -->
	<target name="push-docker-image-teamcity-database-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="teamcity-database" />
			<param name="image.path" value="${docker.image.path}/teamcity-database" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: teamcity-database -->
	<target name="push-docker-image-teamcity-database-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="teamcity-database" />
			<param name="image.path" value="${docker.image.path}/teamcity-database" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: tomcat-base -->
	<target name="push-docker-image-tomcat-base-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="tomcat-base" />
			<param name="image.path" value="${docker.image.path}/tomcat-base" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: tomcat-base -->
	<target name="push-docker-image-tomcat-base-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="tomcat-base" />
			<param name="image.path" value="${docker.image.path}/tomcat-base" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: web-ui-ara -->
	<target name="push-docker-image-web-ui-ara-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="web-ui-ara" />
			<param name="image.path" value="${docker.image.path}/web-ui-ara" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: web-ui-ara -->
	<target name="push-docker-image-web-ui-ara-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="web-ui-ara" />
			<param name="image.path" value="${docker.image.path}/web-ui-ara" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: web-ui-ncsu -->
	<target name="push-docker-image-web-ui-ncsu-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="web-ui-ncsu" />
			<param name="image.path" value="${docker.image.path}/web-ui-ncsu" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: web-ui-ncsu -->
	<target name="push-docker-image-web-ui-ncsu-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="web-ui-ncsu" />
			<param name="image.path" value="${docker.image.path}/web-ui-ncsu" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: reverse-proxy -->
	<target name="push-docker-image-reverse-proxy-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="reverse-proxy" />
			<param name="image.path" value="${docker.image.path}/reverse-proxy" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: reverse-proxy -->
	<target name="push-docker-image-reverse-proxy-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="reverse-proxy" />
			<param name="image.path" value="${docker.image.path}/reverse-proxy" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: dev-console -->
	<target name="push-docker-image-dev-console-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="dev-console" />
			<param name="image.path" value="${docker.image.path}/dev-console" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: dev-console -->
	<target name="push-docker-image-dev-console-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="dev-console" />
			<param name="image.path" value="${docker.image.path}/dev-console" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- Push: swagger-ui -->
	<target name="push-docker-image-swagger-ui-dev" description="Pushes the docker image to the AWS registry as :dev" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="swagger-ui" />
			<param name="image.path" value="${docker.image.path}/swagger-ui" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="dev" />
		</antcall>
	</target>

	<!-- Push: swagger-ui -->
	<target name="push-docker-image-swagger-ui-prod" description="Pushes the docker image to the AWS registry as :prod" depends="create-build-tag">
		<antcall target="run-push-docker-image">
			<param name="repo.name" value="imaginationsupport" />
			<param name="image.name" value="swagger-ui" />
			<param name="image.path" value="${docker.image.path}/swagger-ui" />
			<param name="build.tag" value="${docker.build.tag}" />
			<param name="release.tier.tag" value="prod" />
		</antcall>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<!-- Prep: web-ui-ara -->
	<target name="prep-docker-build-web-ui-ara" depends="
		use-auth,
		use-web-ui-theme-ara,
		build-web-ui-war,
		build-web-ui-tomcat-server-jars-tar-gz,
		use-web-user-support-theme-ara,
		build-web-user-support-war,
		build-web-user-support-tomcat-server-jars-tar-gz">
		<copy file="${web-ui.war.path}" tofile="${docker.image.web-ui-ara.path}/web-ui.war" />
		<copy file="${web-ui.tomcat.jars.tar.gz.path}" tofile="${docker.image.web-ui-ara.path}/tomcat-jars-web-ui.tar.gz" />
		<copy file="${web-user-support.war.path}" tofile="${docker.image.web-ui-ara.path}/web-user-support.war" />
		<copy file="${web-user-support.tomcat.jars.tar.gz.path}" tofile="${docker.image.web-ui-ara.path}/tomcat-jars-web-user-support.tar.gz" />
	</target>

	<!-- Prep: web-ui-ncsu -->
	<target name="prep-docker-build-web-ui-ncsu" depends="
		use-auth,
		use-web-ui-theme-ncsu,
		build-web-ui-war,
		build-web-ui-tomcat-server-jars-tar-gz,
		use-web-user-support-theme-ncsu,
		build-web-user-support-war,
		build-web-user-support-tomcat-server-jars-tar-gz">
		<copy file="${web-ui.war.path}" tofile="${docker.image.web-ui-ncsu.path}/web-ui.war" />
		<copy file="${web-ui.tomcat.jars.tar.gz.path}" tofile="${docker.image.web-ui-ncsu.path}/tomcat-jars-web-ui.tar.gz" />
		<copy file="${web-user-support.war.path}" tofile="${docker.image.web-ui-ncsu.path}/web-user-support.war" />
		<copy file="${web-user-support.tomcat.jars.tar.gz.path}" tofile="${docker.image.web-ui-ncsu.path}/tomcat-jars-web-user-support.tar.gz" />
	</target>

	<!-- ####################################################################################################################################################################### -->

	<!-- Helper: run-build-docker-image -->
	<target name="run-build-docker-image">
		<fail message="Missing: repo.name" unless="repo.name" />
		<fail message="Missing: image.name" unless="image.name" />
		<fail message="Missing: image.path" unless="image.path" />

		<echo message="Building: ${repo.name}/${image.name}" />
		<exec executable="docker" failonerror="true">
			<arg value="build" />
			<arg value="-t" />
			<arg value="${repo.name}/${image.name}" />
			<arg value="${image.path}" />
		</exec>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<!-- Helper: run-push-docker-image -->
	<target name="run-push-docker-image">
		<fail message="Missing: repo.name" unless="repo.name" />
		<fail message="Missing: image.name" unless="image.name" />
		<fail message="Missing: docker.registry" unless="docker.registry" />
		<fail message="Missing: release.tier.tag" unless="release.tier.tag" />

		<!-- Tagging as release tier -->
		<echo message="Tagging: ${repo.name}/${image.name} with :${release.tier.tag}" />
		<exec executable="docker" failonerror="true">
			<arg value="tag" />
			<arg value="${repo.name}/${image.name}" />
			<arg value="${docker.registry}/${image.name}:${release.tier.tag}" />
		</exec>
		<exec executable="docker" failonerror="true">
			<arg value="push" />
			<arg value="${docker.registry}/${image.name}:${release.tier.tag}" />
		</exec>

		<!-- Tagging as :latest -->
		<echo message="Tagging: ${repo.name}/${image.name} with :latest" />
		<exec executable="docker" failonerror="true">
			<arg value="tag" />
			<arg value="${repo.name}/${image.name}" />
			<arg value="${docker.registry}/${image.name}:latest" />
		</exec>
		<exec executable="docker" failonerror="true">
			<arg value="push" />
			<arg value="${docker.registry}/${image.name}:latest" />
		</exec>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<!-- Helper: pull-base-image -->
	<target name="pull-base-image">
		<fail message="Missing: image.name" unless="image.name" />
		<exec executable="docker" failonerror="true">
			<arg value="pull" />
			<arg value="${image.name}" />
		</exec>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<!-- Helper: create-build-tag -->
	<target name="create-build-tag" depends="finish-config">
		<property name="docker.build.tag" value="${app.version}-build-${build.number}" />
		<echo message="Docker build tag: ${docker.build.tag}" />
	</target>

	<!-- ####################################################################################################################################################################### -->

</project>
