<project name="LAS - Scenario Explorer - Web User Support">

	<property name="web-user-support.sass.input.filename" value="web-user-support.scss" />
	<property name="web-user-support.sass.output.filename" value="scenarioexplorer.min.css" />

	<!-- holds the JARs required to compile this project -->
	<path id="web-user-support.compile.classpath">
		<pathelement location="${mongo-java-driver.jar.path}" />

		<pathelement location="${log4j-api.jar.path}" />
		<pathelement location="${log4j-core.jar.path}" />
		<!--<pathelement location="${log4j-web.jar.path}" />-->
		<pathelement location="${apache-commons-csv.jar.path}" />
		<pathelement location="${apache-commons-lang3.jar.path}" />
		<pathelement location="${apache-commons-text.jar.path}" />
		<pathelement location="${apache-httpcomponents-httpcore.jar.path}" />
		<pathelement location="${apache-httpcomponents-httpclient.jar.path}" />
		<pathelement location="${apache-httpcomponents-httpmime.jar.path}" />
		<pathelement location="${org.json.jar.path}" />
		<pathelement location="${apache-tomcat-servlet-api.jar.path}" />
		<pathelement location="${apache-tomcat-jsp-api.jar.path}" />
		<!--<pathelement location="${apache-tomcat-websocket-api.jar.path}" />-->
		<pathelement location="${apache-tomcat-catalina.jar.path}" />
		<pathelement location="${junit4.jar.path}" />
	</path>

	<!-- holds the JARs required on the tomcat server that are located in the common lib dir -->
	<fileset id="web-user-support-common.required.jars" dir="${common.lib.path}">
		<include name="${apache-commons-csv.jar.filename}" />
		<include name="${apache-commons-lang3.jar.filename}" />
		<include name="${apache-commons-text.jar.filename}" />
		<include name="${apache-httpcomponents-httpcore.jar.filename}" />
		<include name="${apache-httpcomponents-httpclient.jar.filename}" />
		<include name="${apache-httpcomponents-httpmime.jar.filename}" />
	</fileset>

	<!-- holds the JARs required on the tomcat server that are located in the web lib dir -->
	<!--<fileset id="web-user-support-web.required.jars" dir="${web.lib.path}">-->
	<!--</fileset>-->

	<union id="web-user-support.tomcat.jars.fileset">
		<resources refid="common.required.jars" />
		<resources refid="web-user-support-common.required.jars" />
		<!--<resources refid="web-user-support-web.required.jars" />-->
	</union>

	<property name="web-user-support.tomcat.jars.tar.gz.filename" value="web-user-support.tomcat.jars.tar.gz" />

	<!-- ####################################################################################################################################################################### -->

	<target name="compile-web-user-support-java" description="Compiles the User Support java source code" depends="
		finish-config,
		build-common-jar,
		create-build-dir">

		<fail unless="common.jar.path" message="Common JAR path does not exist!" />

		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${mongo-java-driver.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${log4j-api.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${log4j-core.jar.path}" />
		</antcall>
		<!--<antcall target="verify-path-exists">-->
		<!--<param name="path.to.verify" value="${log4j-web.jar.path}" />-->
		<!--</antcall>-->
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-commons-csv.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-commons-lang3.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-commons-text.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-httpcomponents-httpcore.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-httpcomponents-httpclient.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-httpcomponents-httpmime.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${org.json.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-tomcat-servlet-api.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-tomcat-jsp-api.jar.path}" />
		</antcall>
		<!--<antcall target="verify-path-exists">-->
		<!--<param name="path.to.verify" value="${apache-tomcat-websocket-api.jar.path}" />-->
		<!--</antcall>-->
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${apache-tomcat-catalina.jar.path}" />
		</antcall>
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${junit4.jar.path}" />
		</antcall>

		<!-- create the base directory -->
		<property name="web-user-support.build.path" value="${build.path}/web-user-support" />
		<mkdir dir="${web-user-support.build.path}" />

		<!-- create the staging src directory -->
		<property name="web-user-support.build.src.path" value="${web-user-support.build.path}/src" />
		<mkdir dir="${web-user-support.build.src.path}" />

		<!-- stage the java files into the build directory -->
		<copy todir="${web-user-support.build.src.path}">

			<!-- from web-common -->
			<fileset dir="${web-common.project.path}/src">
				<include name="**/*.java" />
			</fileset>

			<!-- from web-user-support -->
			<fileset dir="${web-user-support.project.path}/src">
				<include name="**/*.java" />
			</fileset>
		</copy>

		<!-- create the staging test directory -->
		<!--<property name="web-user-support.build.test.path" value="${web-user-support.build.path}/test" />-->
		<!--<mkdir dir="${web-user-support.build.test.path}" />-->

		<!-- stage the java files into the build directory -->
		<!--<copy todir="${web-user-support.build.test.path}">-->
		<!--<fileset dir="${web-user-support.project.path}/test">-->
		<!--<include name="**/*.java" />-->
		<!--</fileset>-->
		<!--</copy>-->

		<!-- update the WebCommon if we are using auth -->
		<property name="web-user-support.build.WebCommon.java.path" value="${web-user-support.build.src.path}/com/imaginationsupport/web/WebCommon.java" />
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${web-user-support.build.WebCommon.java.path}" />
		</antcall>
		<replaceregexp
			file="${web-user-support.build.WebCommon.java.path}"
			match="static final boolean USING_AUTHENTICATION = (true|false);"
			replace="static final boolean USING_AUTHENTICATION = ${using.auth.bool};"
			byline="true" />

		<property name="web-user-support.build.classes.path" value="${web-user-support.build.path}/classes" />
		<mkdir dir="${web-user-support.build.classes.path}" />

		<!-- compile the updated java files -->
		<javac destdir="${web-user-support.build.classes.path}" debug="true" target="${java.target.version}" source="${java.target.version}" includeAntRuntime="false">
			<src path="${web-user-support.build.src.path}" />

			<classpath refid="web-user-support.compile.classpath" />
			<classpath location="${common.jar.path}" />

			<compilerarg value="-Xlint" />
			<compilerarg value="-Xlint:-processing" />
		</javac>

	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="test-web-user-support" description="Runs all JUnit tests for the User Support project" depends="
		compile-common-java,
		compile-web-user-support-java,
		create-output-dir">

		<!-- TODO nothing to test! -->

	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="configure-web-user-support-auth" if="using.auth">

		<!-- load the context.xml auth setup -->
		<loadfile srcFile="${web-user-support.project.path}/web/META-INF/context.xml.auth-setup" property="web-user-support.context-xml.auth.setup" />

		<!-- load the web.xml auth setup -->
		<loadfile srcFile="${web-user-support.project.path}/web/WEB-INF/web.xml.auth-setup" property="web-user-support.web-xml.auth.setup" />

	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="stage-web-user-support-static-content" depends="
		finish-config,
		compile-web-user-support-java,
		configure-web-user-support-auth">

		<!-- copy all of the static web files (js, css, images and config files) to the build directory -->
		<property name="web-user-support.build.WebContent.path" value="${web-user-support.build.path}/webcontent" />
		<copy todir="${web-user-support.build.WebContent.path}">

			<!-- from web-ui -->
			<fileset dir="${web-ui.project.path}/web">
				<include name="js/util.js" />
				<include name="js/taglib.js" />
				<!-- TODO these really should be in web-common -->
			</fileset>

			<!-- from web-common -->
			<fileset dir="${web-common.project.path}/web">
				<include name="*.jsp" />

				<include name="js/*.js" />
				<include name="js/third-party/*.js" />
				<include name="js/third-party/*.js.map" />
				<exclude name="**/*externs.js" />

				<include name="css/*.css" />
				<include name="css/*.css.map" />
				<include name="css/sass/*.scss" />

				<include name="img/*.png" />
				<include name="img/*.jpg" />
			</fileset>

			<!-- from web-user-support -->
			<fileset dir="${web-user-support.project.path}/web">
				<include name="*.jsp" />

				<include name="js/*.js" />
				<include name="js/api/*.js" />
				<include name="js/third-party/*.js" />
				<include name="js/third-party/*.js.map" />
				<exclude name="**/*externs.js" />

				<include name="css/*.css" />
				<include name="css/*.css.map" />
				<include name="css/sass/*.scss" />
				<include name="img/*.png" />
				<include name="img/*.jpg" />

				<include name="WEB-INF/web.xml" />
				<include name="WEB-INF/log4j2.xml" />
				<include name="WEB-INF/**.tld" />

				<include name="META-INF/context.xml" />
			</fileset>
		</copy>

		<!-- copy the taglib templates -->
		<property name="web-user-support.build.classes.templates.path" value="${web-user-support.build.classes.path}/templates" />
		<mkdir dir="${web-user-support.build.classes.templates.path}" />
		<copy todir="${web-user-support.build.classes.templates.path}">
			<fileset dir="${web-common.project.path}/templates">
				<include name="**/*.html" />
			</fileset>
		</copy>

		<!-- copy any theme files over the base files -->
		<fail unless="web-user-support.theme.name" message="Web UI theme name not set!" />
		<property name="web-user-support.theme.path" value="${web-common.project.path}/themes/${web-user-support.theme.name}" />
		<antcall target="verify-path-exists">
			<param name="path.to.verify" value="${web-user-support.theme.path}" />
		</antcall>
		<copy todir="${web-user-support.build.classes.templates.path}" overwrite="true">
			<fileset dir="${web-user-support.theme.path}">
				<include name="*.html" />
			</fileset>
		</copy>

		<!-- set default text if we aren't using auth -->
		<property name="web-user-support.web-xml.auth.setup" value="&lt;!-- not using auth --&gt;" />
		<property name="web-user-support.context-xml.auth.setup" value="&lt;!-- not using auth --&gt;" />

		<!-- replace the template placeholder in the META-INF/context.xml file -->
		<replace file="${web-user-support.build.WebContent.path}/META-INF/context.xml" token="&lt;!-- TEMPLATE: AUTH SETUP --&gt;" value="${web-user-support.context-xml.auth.setup}" />

		<!-- replace the template placeholder in the WEB-INF/web.xml file -->
		<replace file="${web-user-support.build.WebContent.path}/WEB-INF/web.xml" token="&lt;!-- TEMPLATE: AUTH SETUP --&gt;" value="${web-user-support.web-xml.auth.setup}" />

		<!-- inject path into the context.xml -->
		<!--<replaceregexp-->
		<!--file="${web-user-support.build.WebContent.path}/META-INF/context.xml"-->
		<!--match="(\s)path=&quot;.*&quot;"-->
		<!--replace="\1path=&quot;${tomcat.deploy.path}&quot;"-->
		<!--byline="true" />-->

		<!-- inject doc base into the context.xml -->
		<!--<replaceregexp-->
		<!--file="${web-user-support.build.WebContent.path}/META-INF/context.xml"-->
		<!--match="(\s)docBase=&quot;.*?&quot;"-->
		<!--replace="\1docBase=&quot;${app.name}&quot;"-->
		<!--byline="true" />-->

		<!-- inject LDAP base DN into the context.xml -->
		<replaceregexp
			file="${web-user-support.build.WebContent.path}/META-INF/context.xml"
			match="\{\{ldap.basedn\}\}"
			replace="${ldap.basedn}"
			byline="true" />

		<!-- inject LDAP group name into the context.xml -->
		<!--<replaceregexp-->
		<!--file="${web-user-support.build.WebContent.path}/WEB-INF/web.xml"-->
		<!--match="\{\{ldap\.group\.name\}\}"-->
		<!--replace="${ldap.group.name}"-->
		<!--byline="true" />-->
		<!-- this is disabled because we are only using LDAP for authentication and leaving the app to do authorization -->

		<!-- Inject app.name into JSP's and template files -->
		<replaceregexp match="\{\{app\.name\}\}" replace="${app.name}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

		<!-- Inject app.version into JSP's and template files -->
		<replaceregexp match="\{\{app\.version\}\}" replace="${app.version}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

		<!-- Inject build.time into JSP's and template files -->
		<replaceregexp match="\{\{build\.time\}\}" replace="${build.time}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

		<!-- Inject build.number into JSP's and template files -->
		<replaceregexp match="\{\{build\.number\}\}" replace="${build.number}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

		<!-- Inject git.commit.id into JSP's and template files -->
		<replaceregexp match="\{\{git\.commit\.id\}\}" replace="${git.commit.id}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

		<!-- Inject git.branch into JSP's and template files -->
		<replaceregexp match="\{\{git\.branch\}\}" replace="${git.branch}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

		<!-- Inject web-user-support.deploy.path into JSP's and template files -->
		<replaceregexp match="\{\{web-user-support\.deploy\.path\}\}" replace="${web-user-support.deploy.path}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

		<!-- Inject web-user-support.deploy.path into JSP's and template files -->
		<replaceregexp match="\{\{web-user-support\.deploy\.path\}\}" replace="${web-user-support.deploy.path}" byline="true" flags="g">
			<fileset dir="${web-user-support.build.WebContent.path}">
				<include name="*.jsp" />
			</fileset>
			<fileset dir="${web-user-support.build.classes.templates.path}">
				<include name="*.html" />
			</fileset>
		</replaceregexp>

	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="compile-web-user-support-css" depends="stage-web-user-support-static-content">
		<fail unless="sass.style" message="Property missing: sass.style" />

		<!-- run sass -->
		<echo message="Using: ${sass.style}" />
		<exec executable="sass" failonerror="true">
			<arg line="--update" />
			<arg line="--style" />
			<arg line="${sass.style}" />
			<arg line="${web-user-support.build.WebContent.path}/css/sass/${web-user-support.sass.input.filename}:${web-user-support.build.WebContent.path}/css/${web-user-support.sass.output.filename}" />
		</exec>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="init-compile-web-user-support-js"><!-- TODO should be a common antcall target -->
		<echo message="(not implemented)" /><!-- TODO finish! -->
	</target>

	<target name="compile-web-user-support-js" depends="init-compile-web-user-support-js"><!-- TODO should be a common antcall target -->
		<echo message="(not implemented)" /><!-- TODO finish! -->
	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="build-web-user-support-war" description="Builds the User Support WAR file" depends="
		finish-config,
		build-common-jar,
		compile-web-user-support-java,
		stage-web-user-support-static-content,
		compile-web-user-support-css,
		compile-web-user-support-js,
		create-output-dir">

		<fail unless="build.time" message="Property missing: build.time" />
		<fail unless="build.number" message="Property missing: build.number" />
		<fail unless="git.branch" message="Property missing: git.branch" />
		<fail unless="git.commit.id" message="Property missing: git.commit.id" />
		<fail unless="app.name" message="Property missing: app.name" />
		<fail unless="app.version" message="Property missing: app.version" />

		<fail unless="common.jar.path" message="Common JAR path does not exist!" />

		<property name="web-user-support.war.path" value="${output.path}/${web-user-support.war.filename}" />
		<echo message="Output WAR: ${web-user-support.war.path}" />

		<war destfile="${web-user-support.war.path}" duplicate="fail" webxml="${web-user-support.build.WebContent.path}/WEB-INF/web.xml">
			<manifest>
				<attribute name="Sealed" value="true" />
				<attribute name="Built-On" value="${build.time}" />
				<attribute name="Created-By" value="${app.name} development team" />
				<attribute name="Build-Version" value="${app.version} from ${git.branch} commit ${git.commit.id} - build ${build.number}" />
				<attribute name="Class-Path" value="" />
			</manifest>

			<classes dir="${web-user-support.build.classes.path}">
			</classes>

			<fileset dir="${web-user-support.build.WebContent.path}">
				<exclude name="**/sass/**" />
			</fileset>

			<lib file="${common.jar.path}" />
		</war>

	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="build-web-user-support-tomcat-server-jars-tar-gz" description="Bundles all helper JAR files the Tomcat server needs for the User Support project" depends="
		finish-config,
		build-common-jar,
		create-output-dir">

		<property name="web-user-support.tomcat.jars.tar.temp.path" value="${build.path}/web-user-support.tomcat.jars.temp.tar" />
		<property name="web-user-support.tomcat.jars.tar.gz.path" value="${output.path}/${web-user-support.tomcat.jars.tar.gz.filename}" />

		<tar destfile="${web-user-support.tomcat.jars.tar.temp.path}">
			<resources refid="web-user-support.tomcat.jars.fileset" />
		</tar>
		<gzip destfile="${web-user-support.tomcat.jars.tar.gz.path}" src="${web-user-support.tomcat.jars.tar.temp.path}" />

	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="undeploy-web-user-support" description="Removes the User Support project from the running Tomcat server" depends="
		load-properties-deploy-tomcat,
		init-tomcat-tasks">

		<fail unless="tomcat.protocol" message="Property missing: tomcat.protocol" />
		<fail unless="tomcat.hostname" message="Property missing: tomcat.hostname" />
		<fail unless="tomcat.port" message="Property missing: tomcat.port" />
		<fail unless="tomcat.deploy.path" message="Property missing: tomcat.deploy.path" />

		<fail unless="tomcat.username" message="Property missing: tomcat.username" />
		<fail unless="tomcat.password" message="Property missing: tomcat.password" />

		<antcall target="undeploy-tomcat" inheritAll="false">
			<param name="tomcat.protocol" value="${tomcat.protocol}" />
			<param name="tomcat.hostname" value="${tomcat.hostname}" />
			<param name="tomcat.port" value="${tomcat.port}" />
			<param name="tomcat.username" value="${tomcat.username}" />
			<param name="tomcat.password" value="${tomcat.password}" />
			<param name="tomcat.deploy.path" value="${tomcat.deploy.path}" />
		</antcall>
	</target>

	<target name="deploy-web-user-support" description="Deploys the User Support project on the running Tomcat server" depends="
		load-properties-deploy-tomcat,
		init-tomcat-tasks,
		build-web-user-support-war,
		undeploy-web-user-support">

		<fail unless="tomcat.protocol" message="Property missing: tomcat.protocol" />
		<fail unless="tomcat.hostname" message="Property missing: tomcat.hostname" />
		<fail unless="tomcat.port" message="Property missing: tomcat.port" />
		<fail unless="tomcat.deploy.path" message="Property missing: tomcat.deploy.path" />

		<fail unless="tomcat.username" message="Property missing: tomcat.username" />
		<fail unless="tomcat.password" message="Property missing: tomcat.password" />

		<antcall target="deploy-tomcat" inheritAll="false">
			<param name="tomcat.protocol" value="${tomcat.protocol}" />
			<param name="tomcat.hostname" value="${tomcat.hostname}" />
			<param name="tomcat.port" value="${tomcat.port}" />
			<param name="tomcat.username" value="${tomcat.username}" />
			<param name="tomcat.password" value="${tomcat.password}" />
			<param name="tomcat.deploy.path" value="${tomcat.deploy.path}" />
			<param name="war.path" value="${web-user-support.war.path}" />
		</antcall>
	</target>

	<!-- ####################################################################################################################################################################### -->

	<target name="use-web-user-support-theme-ara" description="Configures the build to use the ARA theme for the Web-UI">
		<fail if="web-user-support.theme.name" message="Theme already set!  (Currently: ${web-user-support.theme.name})" />
		<property name="web-user-support.theme.name" value="ara" />
	</target>

	<target name="use-web-user-support-theme-ncsu" description="Configures the build to use the NCSU theme for the Web-UI">
		<fail if="web-user-support.theme.name" message="Theme already set!  (Currently: ${web-user-support.theme.name})" />
		<property name="web-user-support.theme.name" value="ncsu" />
	</target>

	<!-- ####################################################################################################################################################################### -->

	<!--<target name="prep-docker-build-web-user-support-ara" depends="-->
	<!--use-auth,-->
	<!--use-web-user-support-theme-ara,-->
	<!--build-web-user-support-war,-->
	<!--build-web-user-support-tomcat-server-jars-tar-gz">-->

	<!--<copy file="${web-user-support.war.path}" tofile="${docker.image.web-user-support-ara.path}/web-user-support.war" />-->
	<!--<copy file="${web-user-support.tomcat.jars.tar.gz.path}" tofile="${docker.image.web-user-support-ara.path}/tomcat-jars.tar.gz" />-->
	<!--</target>-->

	<!--<target name="prep-docker-build-web-user-support-ncsu" depends="-->
	<!--use-auth,-->
	<!--use-web-user-support-theme-ncsu,-->
	<!--build-web-user-support-war,-->
	<!--build-web-user-support-tomcat-server-jars-tar-gz">-->

	<!--<copy file="${web-user-support.war.path}" tofile="${docker.image.web-user-support-ncsu.path}/web-user-support.war" />-->
	<!--<copy file="${web-user-support.tomcat.jars.tar.gz.path}" tofile="${docker.image.web-user-support-ncsu.path}/tomcat-jars.tar.gz" />-->
	<!--</target>-->

	<!-- ####################################################################################################################################################################### -->

</project>
